# aam.globalsphare.com/v1alpha1/workloadType/webservice
insert into t_type(`name`, `ver`,`value`)values("webservice", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: webservice\nspec:\n  parameter: |\n    image: string\n    port:  *80 | int\n    cmd?: [...string]\n    args?: [...string]\n    cpu?: string\n    env?: [...{\n        name:   string\n        value?: string\n        valueFrom?: {\n            secretKeyRef: {\n                name: string\n                key:  string\n            }\n        }\n    }]\n    configs?: [...{\n        path:     string\n        subPath?: string\n        data: [...{\n            name:  string\n            value: string\n        }]\n    }]\n    storage?: {\n        capacity: string\n        path:     string\n    }\n  traits:\n    - ingress");
# aam.globalsphare.com/v1alpha1/workloadType/worker
insert into t_type(`name`, `ver`,`value`)values("worker", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: worker\nspec:\n  parameter: |\n    image: string\n    port:  *80 | int\n    cmd?: [...string]\n    args?: [...string]\n    cpu?: string\n    env?: [...{\n        name:   string\n        value?: string\n        valueFrom?: {\n            secretKeyRef: {\n                name: string\n                key:  string\n            }\n        }\n    }]\n    configs?: [...{\n        path:     string\n        subPath?: string\n        data: [...{\n            name:  string\n            value: string\n        }]\n    }]\n    storage?: {\n        capacity: string\n        path:     string\n    }");
# aam.globalsphare.com/v1alpha1/workloadType/mysql
insert into t_type(`name`, `ver`,`value`)values("mysql", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: mysql\nspec:\n  parameter: |\n    rootpwd: string | \"123456\"\n    storage: {\n      capacity: string | \"1Gi\"\n    }\n    init: string");
# aam.globalsphare.com/v1alpha1/workloadType/mysql-bare
insert into t_type(`name`, `ver`,`value`)values("mysql-bare", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: mysql-bare\nspec:\n  parameter: |\n    rootpwd: string | \"123456\"\n    init: string");
# aam.globalsphare.com/v1alpha1/workloadType/redis
insert into t_type(`name`, `ver`,`value`)values("redis", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: redis\nspec:\n  parameter: |");
# aam.globalsphare.com/v1alpha1/workloadType/kafka
insert into t_type(`name`, `ver`,`value`)values("kafka", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: kafka\nspec:\n  parameter: |\n    size: *\"1G\" | string\n    broker_num: int | *3\n    zookeeper_name: string");
# aam.globalsphare.com/v1alpha1/workloadType/rabbitmq
insert into t_type(`name`, `ver`,`value`)values("rabbitmq", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: rabbitmq\nspec:\n  parameter: |\n    image: *\"rabbitmq:3-management\" | string\n    vhost: *\"my_vhost\" | string\n    user: *\"admin\" | string\n    password: *\"123456\" | string\n    size: *\"1G\" | string");
# aam.globalsphare.com/v1alpha1/workloadType/zookeeper
insert into t_type(`name`, `ver`,`value`)values("zookeeper", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadType\nmetadata:\n  name: zookeeper\nspec:\n  parameter: |\n    size: *\"1G\" | string");
# aam.globalsphare.com/v1alpha1/workloadVendor/webservice
insert into t_vendor(`name`, `ver`,`value`)values("webservice", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: webservice\nspec: |\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.dependencies != _|_ {\n  \tfor k, v in parameter.dependencies {\n  \t\t\"dependencies-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\t\"\\(k)\": v.host\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != \"\" {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t\trequests:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: parameter.port\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n  \t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n  \t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\tvolumes: [\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\tname: \"dependencies-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.storage != _|_\n  \t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t},\n\n  \t\t\t]\n  \t\t}\n  \t\t}\n  \t}\n  }\n\n  service: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"http\"\n  \t\t\tport: 80\n  \t\t\tif parameter.port != _|_ {\n  \t\t\t\ttargetPort: parameter.port\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.ingress != _|_ {\n  \t\"ingressgateway-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-http\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   80\n  \t\t\t\t\tname:     \"http\"\n  \t\t\t\t\tprotocol: \"HTTP\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"ingressgateway-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-https\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   443\n  \t\t\t\t\tname:     \"https\"\n  \t\t\t\t\tprotocol: \"HTTPS\"\n  \t\t\t\t}\n  \t\t\t\ttls: {\n  \t\t\t\t\tmode:              \"SIMPLE\"\n  \t\t\t\t\tserverCertificate: \"/etc/istio/ingressgateway-certs/tls.crt\"\n  \t\t\t\t\tprivateKey:        \"/etc/istio/ingressgateway-certs/tls.key\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n\n  \t\"virtualservice-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-http\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-http\"]\n  \t\t\thttp: [{\n  \t\t\t\tname: context.workloadName\n  \t\t\t\tif parameter.ingress.http != _|_ {\n  \t\t\t\t\tmatch: []\n  \t\t\t\t}\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\tport: number: 80\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"virtualservice-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-https\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-https\"]\n  \t\t\thttp: [{\n  \t\t\t\tmatch: []\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t\tport: {\n  \t\t\t\t\t\t\tnumber: 80\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  }\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.dependencies != _|_ {\n  \tfor k, v in parameter.dependencies {\n  \t\t\"dependencies-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\t\"\\(k)\": v.host\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != \"\" {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t\trequests:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: parameter.port\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n  \t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n  \t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\tvolumes: [\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\tname: \"dependencies-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.storage != _|_\n  \t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t},\n\n  \t\t\t]\n  \t\t}\n  \t\t}\n  \t}\n  }\n\n  service: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"http\"\n  \t\t\tport: 80\n  \t\t\tif parameter.port != _|_ {\n  \t\t\t\ttargetPort: parameter.port\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.ingress != _|_ {\n  \t\"ingressgateway-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-http\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   80\n  \t\t\t\t\tname:     \"http\"\n  \t\t\t\t\tprotocol: \"HTTP\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"ingressgateway-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-https\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   443\n  \t\t\t\t\tname:     \"https\"\n  \t\t\t\t\tprotocol: \"HTTPS\"\n  \t\t\t\t}\n  \t\t\t\ttls: {\n  \t\t\t\t\tmode:              \"SIMPLE\"\n  \t\t\t\t\tserverCertificate: \"/etc/istio/ingressgateway-certs/tls.crt\"\n  \t\t\t\t\tprivateKey:        \"/etc/istio/ingressgateway-certs/tls.key\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n\n  \t\"virtualservice-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-http\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-http\"]\n  \t\t\thttp: [{\n  \t\t\t\tname: context.workloadName\n  \t\t\t\tif parameter.ingress.http != _|_ {\n  \t\t\t\t\tmatch: []\n  \t\t\t\t}\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\tport: number: 80\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"virtualservice-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-https\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-https\"]\n  \t\t\thttp: [{\n  \t\t\t\tmatch: []\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t\tport: {\n  \t\t\t\t\t\t\tnumber: 80\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  }\n\n  \"-viewer\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \t\"metadata\": {\n  \t\tname:      \"\\(context.workloadName)-viewer\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\taction: \"ALLOW\"\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t}\n  \t\trules: [{\n  \t\t\tfrom: [\n  \t\t\t\t{source: namespaces: [\"istio-system\"]},\n  \t\t\t]\n  \t\t\tto: [{\n  \t\t\t\toperation: {\n  \t\t\t\t\tmethods: [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"PATCH\"]\n  \t\t\t\t}\n  \t\t\t}]\n  \t\t}]\n  \t}\n  }\n");
# aam.globalsphare.com/v1alpha1/workloadVendor/worker
insert into t_vendor(`name`, `ver`,`value`)values("worker", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: worker\nspec: |\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != _|_ {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  statefulsetheadless: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tworkload: context.workloadName\n  \t\t\tapp:      context.appName\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tselector: {\n  \t\t\tworkload: context.workloadName\n  \t\t\tapp:      context.appName\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\treplicas:    1\n  \t\tserviceName: \"\\(context.workloadName)-headless\"\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\t\"app\":      context.appName\n  \t\t\t\t\"workload\": context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:            context.workloadName\n  \t\t\t\t\timage:           parameter.image\n  \t\t\t\t\timagePullPolicy: \"Always\"\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits: cpu:   parameter.cpu\n  \t\t\t\t\t\t\trequests: cpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs\"\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [\n  \t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t},\n\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [{\n  \t\t\t\t\tfrom: [\n  \t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t]\n  \t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-viewer\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \t\"metadata\": {\n  \t\tname:      \"\\(context.workloadName)-viewer\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\taction: \"ALLOW\"\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t}\n  \t\trules: [{\n  \t\t\tfrom: [{\n  \t\t\t\tsource: {\n  \t\t\t\t\tnamespaces: [context.namespace]\n  \t\t\t\t}\n  \t\t\t}]\n  \t\t\tto: [{\n  \t\t\t\toperation: {\n  \t\t\t\t\tmethods: [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"PATCH\"]\n  \t\t\t\t}\n  \t\t\t}]\n  \t\t}]\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/mysql
insert into t_vendor(`name`, `ver`,`value`)values("mysql", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: mysql\nspec: |\n  parameter: {\n  \trootpwd: string | \"123456\"\n  \tstorage: {\n  \t\tcapacity: string | \"1Gi\"\n  \t}\n  \tinit: string\n  }\n  \"\\(context.workloadName)-master-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tdata: {\n  \t\t\"my.cnf\": \"\"\"\n  \t\t\t[mysqld]\n  \t\t\tlog-bin = mysql-bin\n  \t\t\tserver-id = 100\n  \t\t\tbinlog_format=row\n  \t\t\tgtid_mode=on\n  \t\t\tenforce_gtid_consistency=on\n  \t\t\t\"\"\"\n  \t\t\"init.sql\": \"\"\"\n          \\(parameter.init)\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t\tserviceName: \"\\(context.workloadName)-master-headless\"\n  \t\treplicas:    1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/mysql:5.7\"\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"MYSQL_ROOT_PASSWORD\"\n  \t\t\t\t\t\tvalue: parameter.rootpwd\n  \t\t\t\t\t}]\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 3306\n  \t\t\t\t\t\tname:          \"mysql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"\\(context.workloadName)-master\"\n  \t\t\t\t\t\tmountPath: \"/var/lib/mysql\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/mysql/conf.d/mysql.cnf\"\n  \t\t\t\t\t\tsubPath:   \"my.cnf\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/docker-entrypoint-initdb.d/init.sql\"\n  \t\t\t\t\t\tsubPath:   \"init.sql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                    rm -rf /var/lib/mysql/lost+found\n                    echo \"start server!\"\n                    /usr/local/bin/docker-entrypoint.sh mysqld\n                  \"\"\",\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-master\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: name: \"\\(context.workloadName)-master\"\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  \"\\(context.workloadName)-slave-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tdata: {\n  \t\t\"my.cnf\": \"\"\"\n  \t\t\t[mysqld]\n  \t\t\tlog-bin = mysql-bin\n  \t\t\tbinlog_format=row\n  \t\t\tgtid_mode=on\n  \t\t\tenforce_gtid_consistency=on\n  \t\t\t\"\"\"\n  \t\t\"init.sql\": \"\"\"\n          change master to master_host='\\(context.workloadName)-master-0.\\(context.workloadName)-master-headless', master_port=3306, master_user='root', master_password='\\(parameter.rootpwd)', master_auto_position=1;\n          start slave;\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t\tserviceName: \"\\(context.workloadName)-slave\"\n  \t\treplicas:    2\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/mysql:5.7\"\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"MYSQL_ROOT_PASSWORD\"\n  \t\t\t\t\t\tvalue: parameter.rootpwd\n  \t\t\t\t\t}]\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 3306\n  \t\t\t\t\t\tname:          \"mysql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"\\(context.workloadName)-slave\"\n  \t\t\t\t\t\tmountPath: \"/var/lib/mysql\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/mysql/conf.d/mysql.cnf\"\n  \t\t\t\t\t\tsubPath:   \"my.cnf\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/docker-entrypoint-initdb.d/init.sql\"\n  \t\t\t\t\t\tsubPath:   \"init.sql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                  rm -rf /var/lib/mysql/lost+found\n                  until mysql -h \\(context.workloadName)-master-0.\\(context.workloadName)-master-headless -P 3306 -p\\(parameter.rootpwd) -e \\\"SELECT 1\\\"; do sleep 1; done\n                  [[ `hostname` =~ -([0-9]+)$ ]] || exit 1\n                  ordinal=${BASH_REMATCH[1]}\n                  echo [mysqld] > /etc/mysql/conf.d/server-id.cnf\n                  echo server-id=$((101 + $ordinal)) >> /etc/mysql/conf.d/server-id.cnf\n                  echo \"run mysql!!\"\n                  /usr/local/bin/docker-entrypoint.sh mysqld\n                  \"\"\"]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-slave\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: name: \"\\(context.workloadName)-slave\"\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/mysql-bare
insert into t_vendor(`name`, `ver`,`value`)values("mysql-bare", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: mysql-bare\nspec: |\n  parameter: {\n  \trootpwd: string | \"123456\"\n  \tstorage: {\n  \t\tcapacity: string | \"1Gi\"\n  \t}\n  \tinit: string\n  }\n  \"\\(context.workloadName)-master-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tdata: {\n  \t\t\"my.cnf\": \"\"\"\n  \t\t\t[mysqld]\n  \t\t\tlog-bin = mysql-bin\n  \t\t\tserver-id = 100\n  \t\t\tbinlog_format=row\n  \t\t\tgtid_mode=on\n  \t\t\tenforce_gtid_consistency=on\n  \t\t\t\"\"\"\n  \t\t\"init.sql\": \"\"\"\n          \\(parameter.init)\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-master-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t\tserviceName: \"\\(context.workloadName)-master-headless\"\n  \t\treplicas:    1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/mysql:5.7\"\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"MYSQL_ROOT_PASSWORD\"\n  \t\t\t\t\t\tvalue: parameter.rootpwd\n  \t\t\t\t\t}]\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 3306\n  \t\t\t\t\t\tname:          \"mysql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/mysql/conf.d/mysql.cnf\"\n  \t\t\t\t\t\tsubPath:   \"my.cnf\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/docker-entrypoint-initdb.d/init.sql\"\n  \t\t\t\t\t\tsubPath:   \"init.sql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                    rm -rf /var/lib/mysql/lost+found\n                    echo \"start server!\"\n                    /usr/local/bin/docker-entrypoint.sh mysqld\n                  \"\"\",\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-master\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-slave-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tdata: {\n  \t\t\"my.cnf\": \"\"\"\n  \t\t\t[mysqld]\n  \t\t\tlog-bin = mysql-bin\n  \t\t\tbinlog_format=row\n  \t\t\tgtid_mode=on\n  \t\t\tenforce_gtid_consistency=on\n  \t\t\t\"\"\"\n  \t\t\"init.sql\": \"\"\"\n          change master to master_host='\\(context.workloadName)-master-0.\\(context.workloadName)-master-headless', master_port=3306, master_user='root', master_password='\\(parameter.rootpwd)', master_auto_position=1;\n          start slave;\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 3306\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t\tserviceName: \"\\(context.workloadName)-slave\"\n  \t\treplicas:    2\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/mysql:5.7\"\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"MYSQL_ROOT_PASSWORD\"\n  \t\t\t\t\t\tvalue: parameter.rootpwd\n  \t\t\t\t\t}]\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 3306\n  \t\t\t\t\t\tname:          \"mysql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/mysql/conf.d/mysql.cnf\"\n  \t\t\t\t\t\tsubPath:   \"my.cnf\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tmountPath: \"/docker-entrypoint-initdb.d/init.sql\"\n  \t\t\t\t\t\tsubPath:   \"init.sql\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                  rm -rf /var/lib/mysql/lost+found\n                  until mysql -h \\(context.workloadName)-master-0.\\(context.workloadName)-master-headless -P 3306 -p\\(parameter.rootpwd) -e \\\"SELECT 1\\\"; do sleep 1; done\n                  [[ `hostname` =~ -([0-9]+)$ ]] || exit 1\n                  ordinal=${BASH_REMATCH[1]}\n                  echo [mysqld] > /etc/mysql/conf.d/server-id.cnf\n                  echo server-id=$((101 + $ordinal)) >> /etc/mysql/conf.d/server-id.cnf\n                  echo \"run mysql!!\"\n                  /usr/local/bin/docker-entrypoint.sh mysqld\n                  \"\"\"]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-slave\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t\tvolumeClaimTemplates: []\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/redis
insert into t_vendor(`name`, `ver`,`value`)values("redis", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: redis\nspec: |\n  parameter: {\n  }\n  \"\\(context.appName)-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.appName)-redis-conf\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tdata: {\n  \t\tmaster: \"\"\"\n  \t\t\tpidfile /var/run/redis.pid\n  \t\t\tport 6379\n  \t\t\tbind 0.0.0.0\n  \t\t\ttimeout 3600\n  \t\t\ttcp-keepalive 1\n  \t\t\tloglevel verbose\n  \t\t\tlogfile /data/redis.log\n  \t\t\tslowlog-log-slower-than 10000\n  \t\t\tslowlog-max-len 128\n  \t\t\tdatabases 16\n  \t\t\tprotected-mode no\n  \t\t\tsave \\\"\\\"\n  \t\t\tappendonly no\n\n  \t\t\t\"\"\"\n\n  \t\tslave: \"\"\"\n          pidfile /var/run/redis.pid\n          port 6379\n          bind 0.0.0.0\n          timeout 3600\n          tcp-keepalive 1\n          loglevel verbose\n          logfile /data/redis.log\n          slowlog-log-slower-than 10000\n          slowlog-max-len 128\n          databases 16\n          protected-mode no\n          save \\\"\\\"\n          appendonly no\n          slaveof \\(context.workloadName)-master 6379\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-service-master\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service-master-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-statefulset-master\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\treplicas:    1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 6379\n  \t\t\t\t\t\tname:          \"redis\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"redis-server\",\n  \t\t\t\t\t\t\"/etc/redis/redis.conf\",\n  \t\t\t\t\t]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"redis-conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n  \t\t\t\t\t\tsubPath:   \"master\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"redis-conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: \"\\(context.workloadName)\"\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\treplicas:    2\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"\\(context.workloadName)-slave\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 6379\n  \t\t\t\t\t\tname:          \"redis\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                  until [ \\\"$(echo 'set check_status 1'|timeout 3 redis-cli -h \\(context.workloadName)-master)\\\" = \\\"OK\\\" ];do sleep 4s;echo \\\"waiting for the master ready\\\";done\n                  redis-server /etc/redis/redis.conf\n                  \"\"\"]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"redis-conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n  \t\t\t\t\t\tsubPath:   \"slave\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"redis-conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/kafka
insert into t_vendor(`name`, `ver`,`value`)values("kafka", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: kafka\nspec: |\n  parameter: {\n  \tsize:           *\"1G\" | string\n  \tbroker_num:     int | *3\n  \tzookeeper_name: string\n  }\n\n  \"\\(context.workloadName)-kafka-headless-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-kafka-hs\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tport: 9092\n  \t\t\tname: \"server\"\n  \t\t}]\n  \t\tclusterIP: \"None\"\n  \t\tselector: {\n  \t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-kafka-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"client\"\n  \t\t\tport: 9092\n  \t\t}]\n  \t}\n  }\n  \"\\(context.workloadName)-kafka-StatefulSet\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-kafka\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tserviceName: \"\\(context.workloadName)-kafka-hs\"\n  \t\treplicas:    parameter.broker_num\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t\t}\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: {\n  \t\t\t\tlabels: {\n  \t\t\t\t\tapp: \"\\(context.workloadName)-kafka\"\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"registry.cn-hangzhou.aliyuncs.com/jaxzhai/k8skafka:v1\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 9092\n  \t\t\t\t\t\tname:          \"server\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"sh\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"exec kafka-server-start.sh /opt/kafka/config/server.properties --override broker.id=${HOSTNAME##*-} --override listeners=PLAINTEXT://:9092 --override zookeeper.connect=\\(parameter.zookeeper_name)-0.\\(parameter.zookeeper_name)-headless.\\(context.namespace).svc.cluster.local:2181 --override log.dir=/var/lib/kafka --override auto.create.topics.enable=true --override auto.leader.rebalance.enable=true --override background.threads=10 --override compression.type=producer --override delete.topic.enable=true --override leader.imbalance.check.interval.seconds=300 --override leader.imbalance.per.broker.percentage=10 --override log.flush.interval.messages=9223372036854775807 --override log.flush.offset.checkpoint.interval.ms=60000 --override log.flush.scheduler.interval.ms=9223372036854775807 --override log.retention.bytes=-1 --override log.retention.hours=168 --override log.roll.hours=168 --override log.roll.jitter.hours=0 --override log.segment.bytes=1073741824 --override log.segment.delete.delay.ms=60000 --override message.max.bytes=1000012 --override min.insync.replicas=1 --override num.io.threads=8 --override num.network.threads=3 --override num.recovery.threads.per.data.dir=1 --override num.replica.fetchers=1 --override offset.metadata.max.bytes=4096 --override offsets.commit.required.acks=-1 --override offsets.commit.timeout.ms=5000 --override offsets.load.buffer.size=5242880 --override offsets.retention.check.interval.ms=600000 --override offsets.retention.minutes=1440  --override offsets.topic.compression.codec=0 --override offsets.topic.num.partitions=50 --override offsets.topic.replication.factor=3 --override offsets.topic.segment.bytes=104857600 -override queued.max.requests=500 --override quota.consumer.default=9223372036854775807 --override quota.producer.default=9223372036854775807 --override replica.fetch.min.bytes=1 --override replica.fetch.wait.max.ms=500 --override replica.high.watermark.checkpoint.interval.ms=5000  --override replica.lag.time.max.ms=10000 --override replica.socket.receive.buffer.bytes=65536 --override replica.socket.timeout.ms=30000 --override request.timeout.ms=30000 --override socket.receive.buffer.bytes=102400 --override socket.request.max.bytes=104857600 --override socket.send.buffer.bytes=102400 --override unclean.leader.election.enable=true --override zookeeper.session.timeout.ms=6000 --override zookeeper.set.acl=false  --override broker.id.generation.enable=true --override connections.max.idle.ms=600000 --override controlled.shutdown.enable=true --override controlled.shutdown.max.retries=3  --override controlled.shutdown.retry.backoff.ms=5000 --override controller.socket.timeout.ms=30000 --override default.replication.factor=1  --override fetch.purgatory.purge.interval.requests=1000 --override group.max.session.timeout.ms=300000  --override group.min.session.timeout.ms=6000 --override inter.broker.protocol.version=0.10.2-IV0 --override log.cleaner.backoff.ms=15000 --override log.cleaner.dedupe.buffer.size=134217728 --override log.cleaner.delete.retention.ms=86400000 --override log.cleaner.enable=true --override log.cleaner.io.buffer.load.factor=0.9 --override log.cleaner.io.buffer.size=524288 --override log.cleaner.io.max.bytes.per.second=1.7976931348623157E308 --override log.cleaner.min.cleanable.ratio=0.5 --override log.cleaner.min.compaction.lag.ms=0  --override log.cleaner.threads=1 --override log.cleanup.policy=delete  --override log.index.interval.bytes=4096 --override log.index.size.max.bytes=10485760 --override log.message.timestamp.difference.max.ms=9223372036854775807 --override log.message.timestamp.type=CreateTime --override log.preallocate=false --override log.retention.check.interval.ms=300000 --override max.connections.per.ip=2147483647 --override num.partitions=1 --override producer.purgatory.purge.interval.requests=1000 --override replica.fetch.backoff.ms=1000 --override replica.fetch.max.bytes=1048576 -override replica.fetch.response.max.bytes=10485760 --override reserved.broker.max.id=1000\",\n  \t\t\t\t\t]\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"KAFKA_HEAP_OPTS\"\n  \t\t\t\t\t\tvalue: \"-Xmx1G -Xms1G\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"KAFKA_OPTS\"\n  \t\t\t\t\t\tvalue: \"-Dlogging.level=INFO\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"\\(context.workloadName)-kafka\"\n  \t\t\t\t\t\tmountPath: \"/var/lib/kafka\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: {\n  \t\t\t\tname: \"\\(context.workloadName)-kafka\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\tresources: requests: storage: parameter.size\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\t\"workload\": v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/rabbitmq
insert into t_vendor(`name`, `ver`,`value`)values("rabbitmq", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: rabbitmq3\nspec: |\n  parameter: {\n  \timage:    *\"rabbitmq:3-management\" | string\n  \tvhost:    *\"my_vhost\" | string\n  \tuser:     *\"admin\" | string\n  \tpassword: *\"123456\" | string\n  \tsize:     *\"1G\" | string\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\treplicas: 1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter[\"image\"]\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_VHOST\"\n  \t\t\t\t\t\tvalue: parameter[\"vhost\"]\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_USER\"\n  \t\t\t\t\t\tvalue: parameter[\"user\"]\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_PASS\"\n  \t\t\t\t\t\tvalue: parameter[\"password\"]\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\trestartPolicy: \"Always\"\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tport: 1883\n  \t\t\tname: \"port-1833\"\n  \t\t}, {\n  \t\t\tport: 4369\n  \t\t\tname: \"port-4369\"\n  \t\t}, {\n  \t\t\tport: 5671\n  \t\t\tname: \"port-5671\"\n  \t\t}, {\n  \t\t\tport: 5672\n  \t\t\tname: \"port-5672\"\n  \t\t}, {\n  \t\t\tport: 8883\n  \t\t\tname: \"port-8883\"\n  \t\t}, {\n  \t\t\tport: 15672\n  \t\t\tname: \"port-15672\"\n  \t\t}, {\n  \t\t\tport: 25672\n  \t\t\tname: \"port-25672\"\n  \t\t}, {\n  \t\t\tport: 61613\n  \t\t\tname: \"port-61613\"\n  \t\t}, {\n  \t\t\tport: 61614\n  \t\t\tname: \"port-61614\"\n  \t\t}]\n  \t\ttype: \"ClusterIP\"\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/rabbitmq-ceph
insert into t_vendor(`name`, `ver`,`value`)values("rabbitmq-ceph", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: rabbitmq3-ceph\nspec: |\n  parameter: {\n  \timage:    *\"rabbitmq:3-management\" | string\n  \tvhost:    *\"my_vhost\" | string\n  \tuser:     *\"admin\" | string\n  \tpassword: *\"123456\" | string\n  \tsize:     *\"1G\" | string\n  }\n  \"\\(context.workloadName)-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: name: \"storage\"\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-cephfs\"\n  \t\t\t\tresources: requests: storage: parameter.size\n  \t\t\t}\n  \t\t}]\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:            \"main\"\n  \t\t\t\t\timage:           parameter.image\n  \t\t\t\t\timagePullPolicy: \"IfNotPresent\"\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tmountPath: \"/var/lib/rabbitmq\"\n  \t\t\t\t\t\tname:      \"storage\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_VHOST\"\n  \t\t\t\t\t\tvalue: parameter.vhost\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_USER\"\n  \t\t\t\t\t\tvalue: parameter.user\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_PASS\"\n  \t\t\t\t\t\tvalue: parameter.password\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\trestartPolicy: \"Always\"\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tport: 1883\n  \t\t\tname: \"port-1833\"\n  \t\t}, {\n  \t\t\tport: 4369\n  \t\t\tname: \"port-4369\"\n  \t\t}, {\n  \t\t\tport: 5671\n  \t\t\tname: \"port-5671\"\n  \t\t}, {\n  \t\t\tport: 5672\n  \t\t\tname: \"port-5672\"\n  \t\t}, {\n  \t\t\tport: 8883\n  \t\t\tname: \"port-8883\"\n  \t\t}, {\n  \t\t\tport: 15672\n  \t\t\tname: \"port-15672\"\n  \t\t}, {\n  \t\t\tport: 25672\n  \t\t\tname: \"port-25672\"\n  \t\t}, {\n  \t\t\tport: 61613\n  \t\t\tname: \"port-61613\"\n  \t\t}, {\n  \t\t\tport: 61614\n  \t\t\tname: \"port-61614\"\n  \t\t}]\n  \t\ttype: \"ClusterIP\"\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\t\"workload\": v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/rabbitmq-plugins
insert into t_vendor(`name`, `ver`,`value`)values("rabbitmq-plugins", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: rabbitmq3-plugins\nspec: |\n  parameter: {\n  \timage:    *\"rabbitmq:3-management\" | string\n  \tvhost:    *\"my_vhost\" | string\n  \tuser:     *\"admin\" | string\n  \tpassword: *\"123456\" | string\n  \tsize:     *\"1G\" | string\n  }\n  \"\\(context.workloadName)-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tdata: {\n  \t\t\"enabled_plugins\": \"\"\"\n  \t\t\t[rabbitmq_federation_management,rabbitmq_management,rabbitmq_mqtt,rabbitmq_stomp].\n  \t\t\t\"\"\"\n  \t}\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\treplicas: 1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_VHOST\"\n  \t\t\t\t\t\tvalue: parameter.vhost\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_USER\"\n  \t\t\t\t\t\tvalue: parameter.user\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_PASS\"\n  \t\t\t\t\t\tvalue: parameter.password\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tmountPath: \"/etc/rabbitmq/enabled_plugins\"\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tsubPath:   \"enabled_plugins\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\trestartPolicy: \"Always\"\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: context.workloadName\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tport: 1883\n  \t\t\tname: \"port-1833\"\n  \t\t}, {\n  \t\t\tport: 4369\n  \t\t\tname: \"port-4369\"\n  \t\t}, {\n  \t\t\tport: 5671\n  \t\t\tname: \"port-5671\"\n  \t\t}, {\n  \t\t\tport: 5672\n  \t\t\tname: \"port-5672\"\n  \t\t}, {\n  \t\t\tport: 8883\n  \t\t\tname: \"port-8883\"\n  \t\t}, {\n  \t\t\tport: 15672\n  \t\t\tname: \"port-15672\"\n  \t\t}, {\n  \t\t\tport: 25672\n  \t\t\tname: \"port-25672\"\n  \t\t}, {\n  \t\t\tport: 61613\n  \t\t\tname: \"port-61613\"\n  \t\t}, {\n  \t\t\tport: 61614\n  \t\t\tname: \"port-61614\"\n  \t\t}]\n  \t\ttype: \"ClusterIP\"\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/rabbitmq-plugins-ceph
insert into t_vendor(`name`, `ver`,`value`)values("rabbitmq-plugins-ceph", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: rabbitmq3-plugins-ceph\nspec: |\n  parameter: {\n  \timage:    *\"rabbitmq:3-management\" | string\n  \tvhost:    *\"my_vhost\" | string\n  \tuser:     *\"admin\" | string\n  \tpassword: *\"123456\" | string\n  \tsize:     *\"1G\" | string\n  }\n  \"\\(context.workloadName)-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tdata: {\n  \t\t\"enabled_plugins\": \"\"\"\n  \t\t\t[rabbitmq_federation_management,rabbitmq_management,rabbitmq_mqtt,rabbitmq_stomp].\n  \t\t\t\"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: name: \"storage\"\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-cephfs\"\n  \t\t\t\tresources: requests: storage: parameter.size\n  \t\t\t}\n  \t\t}]\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tenv: [{\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_VHOST\"\n  \t\t\t\t\t\tvalue: parameter.vhost\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_USER\"\n  \t\t\t\t\t\tvalue: parameter.user\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tname:  \"RABBITMQ_DEFAULT_PASS\"\n  \t\t\t\t\t\tvalue: parameter.password\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tmountPath: \"/etc/rabbitmq/enabled_plugins\"\n  \t\t\t\t\t\tname:      \"conf\"\n  \t\t\t\t\t\tsubPath:   \"enabled_plugins\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tmountPath: \"/var/lib/rabbitmq\"\n  \t\t\t\t\t\tname:      \"storage\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\trestartPolicy: \"Always\"\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"conf\"\n  \t\t\t\t\tconfigMap: name: context.workloadName\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tport: 1883\n  \t\t\tname: \"port-1833\"\n  \t\t}, {\n  \t\t\tport: 4369\n  \t\t\tname: \"port-4369\"\n  \t\t}, {\n  \t\t\tport: 5671\n  \t\t\tname: \"port-5671\"\n  \t\t}, {\n  \t\t\tport: 5672\n  \t\t\tname: \"port-5672\"\n  \t\t}, {\n  \t\t\tport: 8883\n  \t\t\tname: \"port-8883\"\n  \t\t}, {\n  \t\t\tport: 15672\n  \t\t\tname: \"port-15672\"\n  \t\t}, {\n  \t\t\tport: 25672\n  \t\t\tname: \"port-25672\"\n  \t\t}, {\n  \t\t\tport: 61613\n  \t\t\tname: \"port-61613\"\n  \t\t}, {\n  \t\t\tport: 61614\n  \t\t\tname: \"port-61614\"\n  \t\t}]\n  \t\ttype: \"ClusterIP\"\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/workloadVendor/zookeeper
insert into t_vendor(`name`, `ver`,`value`)values("zookeeper", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: zookeeper\nspec: |\n  import \"list\"\n\n  parameter: {\n  \tsize: *\"1G\" | string\n  }\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname: context.workloadName\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"client\"\n  \t\t\tport: 2181\n  \t\t}]\n  \t}\n  }\n  \"\\(context.workloadName)-headless-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname: \"\\(context.workloadName)-headless\"\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: \"client\"\n  \t\t\tport: 2181\n  \t\t}, {\n  \t\t\tname: \"server\"\n  \t\t\tport: 2888\n  \t\t}, {\n  \t\t\tname: \"leader-election\"\n  \t\t\tport: 3888\n  \t\t}]\n  \t}\n  }\n\n  \"\\(context.workloadName)-StatefulSet\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tserviceName: \"\\(context.workloadName)-headless\"\n  \t\treplicas:    1\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: {\n  \t\t\t\tlabels: {\n  \t\t\t\t\tapp:      context.appName\n  \t\t\t\t\tworkload: context.workloadName\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"fastop/zookeeper:3.4.10\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 2181\n  \t\t\t\t\t\tname:          \"client\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tcontainerPort: 2888\n  \t\t\t\t\t\tname:          \"server\"\n  \t\t\t\t\t}, {\n  \t\t\t\t\t\tcontainerPort: 3888\n  \t\t\t\t\t\tname:          \"leader-election\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"sh\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"start-zookeeper --servers=1 --data_dir=/var/lib/zookeeper/data --data_log_dir=/var/lib/zookeeper/data/log --conf_dir=/opt/zookeeper/conf --client_port=2181 --election_port=3888 --server_port=2888 --tick_time=2000 --init_limit=10 --sync_limit=5 --heap=1G --max_client_cnxns=60 --snap_retain_count=3 --purge_interval=12 --max_session_timeout=40000 --min_session_timeout=4000 --log_level=INFO\",\n  \t\t\t\t\t]\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\t{\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: \"/var/lib/zookeeper\"\n  \t\t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t\tvolumeClaimTemplates: [{\n  \t\t\tmetadata: {\n  \t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taccessModes: [\"ReadWriteOnce\"]\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\tresources: {\n  \t\t\t\t\trequests: {\n  \t\t\t\t\t\tstorage: parameter.size\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
# aam.globalsphare.com/v1alpha1/trait/ingress
insert into t_trait(`name`, `ver`,`value`)values("ingress", "aam.globalsphare.com/v1alpha1", "apiVersion: aam.globalsphare.com/v1alpha1\nkind: Trait\nmetadata:\n  name: ingress\nspec:\n  parameter: |");
