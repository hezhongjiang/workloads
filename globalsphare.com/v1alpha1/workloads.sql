insert into t_vendor(`name`, `yaml`, `cue`, `metadata`, `ver`,`value`)values("webservice-2", "apiVersion: v1\ndata:\n  userconfigs: '{\"password\":\"admin\",\"username\":\"admin\"}'\nkind: ConfigMap\nmetadata:\n  name: userconfigs\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: webservice\nspec:\n  selector:\n    matchLabels:\n      app: webservice\n  template:\n    metadata:\n      labels:\n        app: webservice\n    spec:\n      containers:\n        - image: nginx:1.21\n          name: main\n          ports:\n            - containerPort: 80\n          volumeMounts:\n            - mountPath: /etc/configs/userconfigs\n              name: userconfigs\n              subPath: userconfigs\n      volumes:\n        - configMap:\n            name: userconfigs\n          name: userconfigs\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webservice\nspec:\n  ports:\n    - name: http\n      port: 80\n      targetPort: 80\n  selector:\n    app: webservice", "parameter: {\n\timage: string\n\tport:  *80 | int\n\tcmd?: [...string]\n\targs?: [...string]\n\tcpu?: string\n\tenv?: [...{\n\t\tname:   string\n\t\tvalue?: string\n\t\tvalueFrom?: {\n\t\t\tsecretKeyRef: {\n\t\t\t\tname: string\n\t\t\t\tkey:  string\n\t\t\t}\n\t\t}\n\t}]\n\tconfigs?: [...{\n\t\tpath:     string\n\t\tsubPath?: string\n\t\tdata: [...{\n\t\t\tname:  string\n\t\t\tvalue: string\n\t\t}]\n\t}]\n\tstorage?: {\n\t\tcapacity: string\n\t\tpath:     string\n\t}\n}\nif parameter.userconfigs != _|_ {\n\tuserconfigs: {\n\t\tapiVersion: \"v1\"\n\t\tkind:       \"ConfigMap\"\n\t\tmetadata: {\n\t\t\tname:      \"userconfigs\"\n\t\t\tnamespace: context.namespace\n\t\t}\n\t\tdata: {\n\t\t\tuserconfigs: parameter.userconfigs\n\t\t}\n\t}\n}\nif parameter.dependencies != _|_ {\n\tfor k, v in parameter.dependencies {\n\t\t\"dependencies-\\(k)\": {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"ConfigMap\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"dependencies-\\(k)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tdata: {\n\t\t\t\t\"\\(k)\": v.host\n\t\t\t}\n\t\t}\n\t}\n}\nif parameter.configs != _|_ {\n\tfor k, v in parameter.configs {\n\t\t\"island-\\(context.workloadName)-\\(k)\": {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"ConfigMap\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tdata: {\n\t\t\t\tfor _, vv in v.data {\n\t\t\t\t    \"\\(vv.name)\": vv.value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nif parameter.storage != _|_ {\n\tif parameter.storage.capacity != \"\" {\n\t\tstorage: {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"PersistentVolumeClaim\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tstorageClassName: \"rook-ceph-block\"\n\t\t\t\taccessModes: [\n\t\t\t\t\t\"ReadWriteOnce\",\n\t\t\t\t]\n\t\t\t\tresources: requests: storage: parameter.storage.capacity\n\t\t\t}\n\t\t}\n\t}\n}\n\"deployment-webservice\": {\n\tapiVersion: \"apps/v1\"\n\tkind:       \"Deployment\"\n\tmetadata: {\n\t\tname:      context.workloadName\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\tselector: matchLabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t}\n\t\ttemplate: {\n\t\t\tmetadata: labels: {\n\t\t\t\tapp:      context.appName\n\t\t\t\tworkload: context.workloadName\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tcontainers: [{\n\t\t\t\t\tname:  \"main\"\n\t\t\t\t\timage: parameter.image\n\t\t\t\t\tif parameter.cmd != _|_ {\n\t\t\t\t\t\tcommand: parameter.cmd\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.args != _|_ {\n\t\t\t\t\t\targs: parameter.args\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.env != _|_ {\n\t\t\t\t\t\tenv: parameter.env\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.cpu != _|_ {\n\t\t\t\t\t\tresources: {\n\t\t\t\t\t\t\tlimits:\n\t\t\t\t\t\t\t\tcpu: parameter.cpu\n\t\t\t\t\t\t\trequests:\n\t\t\t\t\t\t\t\tcpu: parameter.cpu\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tports: [{\n\t\t\t\t\t\tcontainerPort: parameter.port\n\t\t\t\t\t}]\n\t\t\t\t\tvolumeMounts: [\n\t\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n\t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n\t\t\t\t\t\t\tsubPath:   v.subPath\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n\t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\t\tmountPath: v.path\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.userconfigs != _|_ {\n\t\t\t\t\t\t\tname:      \"userconfigs\"\n\t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n\t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.dependencies != _|_\n\t\t\t\t\t\tfor k, v in parameter.dependencies {\n\t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n\t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n\t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.storage != _|_\n\t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n\t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n\t\t\t\t\t\t\tmountPath: parameter.storage.path\n\t\t\t\t\t\t},\n\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\tvolumes: [\n\t\t\t\tif parameter.configs != _|_\n\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t},\n\t\t\t\tif parameter.configs != _|_\n\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t},\n\n\t\t\t\tif parameter.userconfigs != _|_ {\n\t\t\t\t\tname: \"userconfigs\"\n\t\t\t\t\tconfigMap: name: \"userconfigs\"\n\t\t\t\t},\n\t\t\t\tif parameter.dependencies != _|_\n\t\t\t\tfor k, v in parameter.dependencies {\n\t\t\t\t\tname: \"dependencies-\\(k)\"\n\t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n\t\t\t\t},\n\n\t\t\t\tif parameter.storage != _|_\n\t\t\t\tif parameter.storage.capacity != \"\" {\n\t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n\t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n\t\t\t\t},\n\n\t\t\t]\n\t\t}\n\t\t}\n\t}\n}\n\"service-webservice\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      context.workloadName\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t}\n\t\tports: [{\n\t\t\tname: \"http\"\n\t\t\tport: 80\n\t\t\tif parameter.port != _|_ {\n\t\t\t\ttargetPort: parameter.port\n\t\t\t}\n\t\t}]\n\t}\n}\n","name: webservice","aam.globalsphare.com/v1alpha1","apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: webservice\nspec: |\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.dependencies != _|_ {\n  \tfor k, v in parameter.dependencies {\n  \t\t\"dependencies-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\t\"\\(k)\": v.host\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != \"\" {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t\trequests:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: parameter.port\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n  \t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n  \t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\tvolumes: [\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\tname: \"dependencies-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.storage != _|_\n  \t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t},\n\n  \t\t\t]\n  \t\t}\n  \t\t}\n  \t}\n  }\n\n  service: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"http\"\n  \t\t\tport: 80\n  \t\t\tif parameter.port != _|_ {\n  \t\t\t\ttargetPort: parameter.port\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.ingress != _|_ {\n  \t\"ingressgateway-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-http\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   80\n  \t\t\t\t\tname:     \"http\"\n  \t\t\t\t\tprotocol: \"HTTP\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"ingressgateway-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-https\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   443\n  \t\t\t\t\tname:     \"https\"\n  \t\t\t\t\tprotocol: \"HTTPS\"\n  \t\t\t\t}\n  \t\t\t\ttls: {\n  \t\t\t\t\tmode:              \"SIMPLE\"\n  \t\t\t\t\tserverCertificate: \"/etc/istio/ingressgateway-certs/tls.crt\"\n  \t\t\t\t\tprivateKey:        \"/etc/istio/ingressgateway-certs/tls.key\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n\n  \t\"virtualservice-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-http\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-http\"]\n  \t\t\thttp: [{\n  \t\t\t\tname: context.workloadName\n  \t\t\t\tif parameter.ingress.http != _|_ {\n  \t\t\t\t\tmatch: []\n  \t\t\t\t}\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\tport: number: 80\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"virtualservice-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-https\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-https\"]\n  \t\t\thttp: [{\n  \t\t\t\tmatch: []\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t\tport: {\n  \t\t\t\t\t\t\tnumber: 80\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  }\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.dependencies != _|_ {\n  \tfor k, v in parameter.dependencies {\n  \t\t\"dependencies-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\t\"\\(k)\": v.host\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != \"\" {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-deployment\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"Deployment\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: parameter.image\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t\trequests:\n  \t\t\t\t\t\t\t\tcpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: parameter.port\n  \t\t\t\t\t}]\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n  \t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n  \t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\tvolumes: [\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.configs != _|_\n  \t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t},\n  \t\t\t\tif parameter.dependencies != _|_\n  \t\t\t\tfor k, v in parameter.dependencies {\n  \t\t\t\t\tname: \"dependencies-\\(k)\"\n  \t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n  \t\t\t\t},\n\n  \t\t\t\tif parameter.storage != _|_\n  \t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t},\n\n  \t\t\t]\n  \t\t}\n  \t\t}\n  \t}\n  }\n\n  service: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\tports: [{\n  \t\t\tname: \"http\"\n  \t\t\tport: 80\n  \t\t\tif parameter.port != _|_ {\n  \t\t\t\ttargetPort: parameter.port\n  \t\t\t}\n  \t\t}]\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.ingress != _|_ {\n  \t\"ingressgateway-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-http\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   80\n  \t\t\t\t\tname:     \"http\"\n  \t\t\t\t\tprotocol: \"HTTP\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"ingressgateway-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"Gateway\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.namespace)-https\"\n  \t\t\tnamespace: \"island-system\"\n  \t\t}\n  \t\tspec: {\n  \t\t\tselector: istio: \"ingressgateway\"\n  \t\t\tservers: [{\n  \t\t\t\tport: {\n  \t\t\t\t\tnumber:   443\n  \t\t\t\t\tname:     \"https\"\n  \t\t\t\t\tprotocol: \"HTTPS\"\n  \t\t\t\t}\n  \t\t\t\ttls: {\n  \t\t\t\t\tmode:              \"SIMPLE\"\n  \t\t\t\t\tserverCertificate: \"/etc/istio/ingressgateway-certs/tls.crt\"\n  \t\t\t\t\tprivateKey:        \"/etc/istio/ingressgateway-certs/tls.key\"\n  \t\t\t\t}\n  \t\t\t\thosts: [\n  \t\t\t\t\tparameter.ingress.host,\n  \t\t\t\t]\n  \t\t\t}]\n  \t\t}\n  \t}\n\n  \t\"virtualservice-http\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-http\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-http\"]\n  \t\t\thttp: [{\n  \t\t\t\tname: context.workloadName\n  \t\t\t\tif parameter.ingress.http != _|_ {\n  \t\t\t\t\tmatch: []\n  \t\t\t\t}\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\tport: number: 80\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  \t\"virtualservice-https\": {\n  \t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\tkind:       \"VirtualService\"\n  \t\tmetadata: {\n  \t\t\tname:      \"\\(context.appName)-https\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tspec: {\n  \t\t\thosts: [\"*\"]\n  \t\t\tgateways: [\"island-system/\\(context.namespace)-https\"]\n  \t\t\thttp: [{\n  \t\t\t\tmatch: []\n  \t\t\t\troute: [{\n  \t\t\t\t\tdestination: {\n  \t\t\t\t\t\thost: context.workloadName\n  \t\t\t\t\t\tport: {\n  \t\t\t\t\t\t\tnumber: 80\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\theaders: {\n  \t\t\t\t\t\trequest: {\n  \t\t\t\t\t\t\tadd: {\n  \t\t\t\t\t\t\t\t\"X-Forwarded-Host\": parameter.ingress.host\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}]\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-viewer\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \t\"metadata\": {\n  \t\tname:      \"\\(context.workloadName)-viewer\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\taction: \"ALLOW\"\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t}\n  \t\trules: [{\n  \t\t\tfrom: [\n  \t\t\t\t{source: namespaces: [\"istio-system\"]}\n  \t\t\t]\n  \t\t\tto: [{\n  \t\t\t\toperation: {\n  \t\t\t\t\tmethods: [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"PATCH\"]\n  \t\t\t\t}\n  \t\t\t}]\n  \t\t}]\n  \t}\n  }\n");
insert into t_vendor(`name`, `yaml`, `cue`, `metadata`, `ver`,`value`)values("worker-2", "apiVersion: v1\ndata:\n  userconfigs: '{\"password\":\"admin\",\"username\":\"admin\"}'\nkind: ConfigMap\nmetadata:\n  name: userconfigs\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: example\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: worker\n  serviceName: example-headless\n  template:\n    metadata:\n      labels:\n        app: worker\n    spec:\n      containers:\n        - image: nginx:1.21\n          name: example\n          volumeMounts:\n            - mountPath: /etc/configs\n              name: userconfigs\n      volumes:\n        - configMap:\n            name: userconfigs\n          name: userconfigs\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: worker\n  name: example-headless\nspec:\n  clusterIP: None\n  selector:\n    app: worker\n\n", "parameter: {\n\timage: string\n\tport:  *80 | int\n\tcmd?: [...string]\n\targs?: [...string]\n\tcpu?: string\n\tenv?: [...{\n\t\tname:   string\n\t\tvalue?: string\n\t\tvalueFrom?: {\n\t\t\tsecretKeyRef: {\n\t\t\t\tname: string\n\t\t\t\tkey:  string\n\t\t\t}\n\t\t}\n\t}]\n\tconfigs?: [...{\n\t\tpath:     string\n\t\tsubPath?: string\n\t\tdata: [...{\n\t\t\tname:  string\n\t\t\tvalue: string\n\t\t}]\n\t}]\n\tstorage?: {\n\t\tcapacity: string\n\t\tpath:     string\n\t}\n}\nif parameter.userconfigs != _|_ {\n\t\"configMap-userconfigs\": {\n\t\tapiVersion: \"v1\"\n\t\tkind:       \"ConfigMap\"\n\t\tmetadata: {\n\t\t\tname:      \"userconfigs\"\n\t\t\tnamespace: context.namespace\n\t\t}\n\t\tdata: userconfigs: parameter.userconfigs\n\t}\n}\nif parameter.dependencies != _|_ {\n\tfor k, v in parameter.dependencies {\n\t\t\"dependencies-\\(k)\": {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"ConfigMap\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"dependencies-\\(k)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tdata: {\n\t\t\t\t\"\\(k)\": v.host\n\t\t\t}\n\t\t}\n\t}\n}\nif parameter.configs != _|_ {\n\tfor k, v in parameter.configs {\n\t\t\"island-\\(context.workloadName)-\\(k)\": {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"ConfigMap\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tdata: {\n\t\t\t\tfor _, vv in v.data {\n\t\t\t\t\t\"\\(vv.name)\": vv.value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nif parameter.storage != _|_ {\n\tif parameter.storage.capacity != \"\" {\n\t\tstorage: {\n\t\t\tapiVersion: \"v1\"\n\t\t\tkind:       \"PersistentVolumeClaim\"\n\t\t\tmetadata: {\n\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n\t\t\t\tnamespace: context.namespace\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tstorageClassName: \"rook-ceph-block\"\n\t\t\t\taccessModes: [\n\t\t\t\t\t\"ReadWriteOnce\",\n\t\t\t\t]\n\t\t\t\tresources: requests: storage: parameter.storage.capacity\n\t\t\t}\n\t\t}\n\t}\n}\n\"statefulSet-example\": {\n\tapiVersion: \"apps/v1\"\n\tkind:       \"StatefulSet\"\n\tmetadata: {\n\t\tname:      context.workloadName\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\treplicas: 1\n\t\tselector: matchLabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t}\n\t\tserviceName: \"\\(context.workloadName)-headless\"\n\t\ttemplate: {\n\t\t\tmetadata: labels: {\n\t\t\t\tapp:      context.appName\n\t\t\t\tworkload: context.workloadName\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tcontainers: [{\n\t\t\t\t\timage: parameter.image\n\t\t\t\t\tname:  \"main\"\n\t\t\t\t\tif parameter.cmd != _|_ {\n\t\t\t\t\t\tcommand: parameter.cmd\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.args != _|_ {\n\t\t\t\t\t\targs: parameter.args\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.env != _|_ {\n\t\t\t\t\t\tenv: parameter.env\n\t\t\t\t\t}\n\t\t\t\t\tif parameter.cpu != _|_ {\n\t\t\t\t\t\tresources: {\n\t\t\t\t\t\t\tlimits: {\n\t\t\t\t\t\t\t\tcpu: parameter.cpu\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trequests: {\n\t\t\t\t\t\t\t\tcpu: parameter.cpu\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tports: [{\n\t\t\t\t\t\tcontainerPort: parameter.port\n\t\t\t\t\t}]\n\t\t\t\t\tvolumeMounts: [\n\t\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n\t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n\t\t\t\t\t\t\tsubPath:   v.subPath\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n\t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\t\tmountPath: v.path\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.userconfigs != _|_ {\n\t\t\t\t\t\t\tname:      \"userconfigs\"\n\t\t\t\t\t\t\tmountPath: \"/etc/configs/userconfigs\"\n\t\t\t\t\t\t\tsubPath:   \"userconfigs\"\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.dependencies != _|_\n\t\t\t\t\t\tfor k, v in parameter.dependencies {\n\t\t\t\t\t\t\tname:      \"dependencies-\\(k)\"\n\t\t\t\t\t\t\tmountPath: \"/etc/configs/\\(k)\"\n\t\t\t\t\t\t\tsubPath:   \"\\(k)\"\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tif parameter.storage != _|_\n\t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n\t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n\t\t\t\t\t\t\tmountPath: parameter.storage.path\n\t\t\t\t\t\t},\n\t\t\t\t\t]\n\t\t\t\t}]\n\t\t\t\tvolumes: [\n\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n\t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t},\n\n\t\t\t\t\tif parameter.configs != _|_\n\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n\t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n\t\t\t\t\t},\n\n\t\t\t\t\tif parameter.userconfigs != _|_ {\n\t\t\t\t\t\tname: \"userconfigs\"\n\t\t\t\t\t\tconfigMap: name: \"userconfigs\"\n\t\t\t\t\t},\n\n\t\t\t\t\tif parameter.dependencies != _|_\n\t\t\t\t\tfor k, v in parameter.dependencies {\n\t\t\t\t\t\tname: \"dependencies-\\(k)\"\n\t\t\t\t\t\tconfigMap: name: \"dependencies-\\(k)\"\n\t\t\t\t\t},\n\n\t\t\t\t\tif parameter.storage != _|_\n\t\t\t\t\tif parameter.storage.capacity != \"\" {\n\t\t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n\t\t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}\n\"service-headless\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-headless\"\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\tclusterIP: \"None\"\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t}\n\t}\n}\n","name: worker","aam.globalsphare.com/v1alpha1","apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: worker\nspec: |\n  parameter: {\n  \timage: string\n  \tport:  *80 | int\n  \tcmd?: [...string]\n  \targs?: [...string]\n  \tcpu?: string\n  \tenv?: [...{\n  \t\tname:   string\n  \t\tvalue?: string\n  \t\tvalueFrom?: {\n  \t\t\tsecretKeyRef: {\n  \t\t\t\tname: string\n  \t\t\t\tkey:  string\n  \t\t\t}\n  \t\t}\n  \t}]\n  \tconfigs?: [...{\n  \t\tpath:     string\n  \t\tsubPath?: string\n  \t\tdata: [...{\n  \t\t\tname:  string\n  \t\t\tvalue: string\n  \t\t}]\n  \t}]\n  \tstorage?: {\n  \t\tcapacity: string\n  \t\tpath:     string\n  \t}\n  }\n  if parameter.userconfigs != _|_ {\n  \tuserconfigs: {\n  \t\tapiVersion: \"v1\"\n  \t\tkind:       \"ConfigMap\"\n  \t\tmetadata: {\n  \t\t\tname:      \"userconfigs\"\n  \t\t\tnamespace: context.namespace\n  \t\t}\n  \t\tdata: {\n  \t\t\tuserconfigs: parameter.userconfigs\n  \t\t}\n  \t}\n  }\n\n  if parameter.configs != _|_ {\n  \tfor k, v in parameter.configs {\n  \t\t\"island-\\(context.workloadName)-\\(k)\": {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"ConfigMap\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tdata: {\n  \t\t\t\tfor _, vv in v.data {\n  \t\t\t\t\tif vv.name != \"island-info\" {\n  \t\t\t\t\t\t\"\\(vv.name)\": vv.value\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.storage != _|_ {\n  \tif parameter.storage.capacity != _|_ {\n  \t\tstorage: {\n  \t\t\tapiVersion: \"v1\"\n  \t\t\tkind:       \"PersistentVolumeClaim\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tstorageClassName: \"rook-ceph-block\"\n  \t\t\t\taccessModes: [\n  \t\t\t\t\t\"ReadWriteOnce\",\n  \t\t\t\t]\n  \t\t\t\tresources: requests: storage: parameter.storage.capacity\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  statefulsetheadless: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tworkload: context.workloadName\n  \t\t\tapp:      context.appName\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tselector: {\n  \t\t\tworkload: context.workloadName\n  \t\t\tapp:      context.appName\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t}\n  \t\treplicas:    1\n  \t\tserviceName: \"\\(context.workloadName)-headless\"\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\t\"app\":      context.appName\n  \t\t\t\t\"workload\": context.workloadName\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:            context.workloadName\n  \t\t\t\t\timage:           parameter.image\n  \t\t\t\t\timagePullPolicy: \"Always\"\n  \t\t\t\t\tif parameter.cmd != _|_ {\n  \t\t\t\t\t\tcommand: parameter.cmd\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.args != _|_ {\n  \t\t\t\t\t\targs: parameter.args\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.env != _|_ {\n  \t\t\t\t\t\tenv: parameter.env\n  \t\t\t\t\t}\n  \t\t\t\t\tif parameter.cpu != _|_ {\n  \t\t\t\t\t\tresources: {\n  \t\t\t\t\t\t\tlimits: cpu:   parameter.cpu\n  \t\t\t\t\t\t\trequests: cpu: parameter.cpu\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t\tvolumeMounts: [\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: \"\\(v.path)/\\(v.subPath)\"\n  \t\t\t\t\t\t\tsubPath:   v.subPath\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\t\tname:      \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\t\tmountPath: v.path\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\t\tname:      \"userconfigs\"\n  \t\t\t\t\t\t\tmountPath: \"/etc/configs\"\n  \t\t\t\t\t\t},\n  \t\t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\t\tname:      \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\t\tmountPath: parameter.storage.path\n  \t\t\t\t\t\t},\n\n  \t\t\t\t\t]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [\n  \t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\tfor k, v in parameter.configs if v.subPath != _|_ {\n  \t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.configs != _|_\n  \t\t\t\t\tfor k, v in parameter.configs if v.subPath == _|_ {\n  \t\t\t\t\t\tname: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t\tconfigMap: name: \"\\(context.workloadName)-\\(k)\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.userconfigs != _|_ {\n  \t\t\t\t\t\tname: \"userconfigs\"\n  \t\t\t\t\t\tconfigMap: name: \"userconfigs\"\n  \t\t\t\t\t},\n  \t\t\t\t\tif parameter.storage != _|_\n  \t\t\t\t\tif parameter.storage.capacity != \"\" {\n  \t\t\t\t\t\tname: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t\tpersistentVolumeClaim: claimName: \"storage-\\(context.workloadName)\"\n  \t\t\t\t\t},\n\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [{\n  \t\t\t\t\tfrom: [\n  \t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t]\n  \t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t}\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  \"\\(context.workloadName)-viewer\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \t\"metadata\": {\n  \t\tname:      \"\\(context.workloadName)-viewer\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\taction: \"ALLOW\"\n  \t\tselector: {\n  \t\t\tmatchLabels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t}\n  \t\t}\n  \t\trules: [{\n  \t\t\tfrom: [\n  \t\t\t\t{source: namespaces: [\"istio-system\"]}\n  \t\t\t]\n  \t\t\tto: [{\n  \t\t\t\toperation: {\n  \t\t\t\t\tmethods: [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"PATCH\"]\n  \t\t\t\t}\n  \t\t\t}]\n  \t\t}]\n  \t}\n  }");
insert into t_vendor(`name`, `yaml`, `cue`, `metadata`, `ver`,`value`)values("redis-2", "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-2\n    item: example-master\n    workload: example\n  name: example\n  namespace: ins1641868755\nspec:\n  ports:\n    - name: example\n      port: 6379\n  selector:\n    app: redis-2\n    item: example-master\n    workload: example\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-2\n    item: example-slave\n    workload: example\n  name: example-slave-headless\n  namespace: ins1641868755\nspec:\n  clusterIP: None\n  ports:\n    - name: example\n      port: 6379\n  selector:\n    app: redis-2\n    item: example-slave\n    workload: example\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: example-slave\n  namespace: ins1641868755\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: redis-2\n      item: example-slave\n      workload: example\n  serviceName: example\n  template:\n    metadata:\n      labels:\n        app: redis-2\n        item: example-slave\n        workload: example\n    spec:\n      containers:\n        - command:\n            - bash\n            - -c\n            - |-\n              until [ \"$(echo 'set check_status 1'|timeout 3 redis-cli -h example-master)\" = \"OK\" ];do sleep 4s;echo \"waiting for the master ready\";done\n              redis-server /etc/redis/redis.conf\n          image: harbor1.zlibs.com/dockerhub/redis:6.2.4\n          name: example-slave\n          ports:\n            - containerPort: 6379\n              name: redis\n          volumeMounts:\n            - mountPath: /etc/redis/redis.conf\n              name: redis-conf\n              subPath: slave\n      serviceAccountName: example\n      volumes:\n        - configMap:\n            name: redis-2-redis-conf\n          name: redis-conf\n---\napiVersion: v1\ndata:\n  master: |-\n    pidfile /var/run/redis.pid\n    port 6379\n    bind 0.0.0.0\n    timeout 3600\n    tcp-keepalive 1\n    loglevel verbose\n    logfile /data/redis.log\n    slowlog-log-slower-than 10000\n    slowlog-max-len 128\n    databases 16\n    protected-mode no\n    save \"\"\n    appendonly no\n  slave: |-\n    pidfile /var/run/redis.pid\n    port 6379\n    bind 0.0.0.0\n    timeout 3600\n    tcp-keepalive 1\n    loglevel verbose\n    logfile /data/redis.log\n    slowlog-log-slower-than 10000\n    slowlog-max-len 128\n    databases 16\n    protected-mode no\n    save \"\"\n    appendonly no\n    slaveof example-master 6379\nkind: ConfigMap\nmetadata:\n  name: redis-2-redis-conf\n  namespace: ins1641868755\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: example-master\n  namespace: ins1641868755\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis-2\n      item: example-master\n      workload: example\n  serviceName: example\n  template:\n    metadata:\n      labels:\n        app: redis-2\n        item: example-master\n        workload: example\n    spec:\n      containers:\n        - command:\n            - redis-server\n            - /etc/redis/redis.conf\n          image: harbor1.zlibs.com/dockerhub/redis:6.2.4\n          name: main\n          ports:\n            - containerPort: 6379\n              name: redis\n          volumeMounts:\n            - mountPath: /etc/redis/redis.conf\n              name: redis-conf\n              subPath: master\n      serviceAccountName: example\n      volumes:\n        - configMap:\n            name: redis-2-redis-conf\n          name: redis-conf\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-2\n    item: example-slave\n    workload: example\n  name: example-slave\n  namespace: ins1641868755\nspec:\n  ports:\n    - name: example\n      port: 6379\n  selector:\n    app: redis-2\n    item: example-slave\n    workload: example\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: example\n  namespace: ins1641868755\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-2\n    item: example-master\n    workload: example\n  name: example-master-headless\n  namespace: ins1641868755\nspec:\n  clusterIP: None\n  ports:\n    - name: example\n      port: 6379\n  selector:\n    app: redis-2\n    item: example-master\n    workload: example\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: redis-2\n    item: example-master\n    workload: example\n  name: example-master\n  namespace: ins1641868755\nspec:\n  ports:\n    - name: example\n      port: 6379\n  selector:\n    app: redis-2\n    item: example-master\n    workload: example\n", "parameter: {}\nserviceAccount: {\n\tapiVersion: \"v1\"\n\tkind:       \"ServiceAccount\"\n\tmetadata: {\n\t\tname:      context.workloadName\n\t\tnamespace: context.namespace\n\t}\n}\n\"redis-conf\": {\n\tapiVersion: \"v1\"\n\tkind:       \"ConfigMap\"\n\tmetadata: {\n\t\tname:      \"\\(context.appName)-redis-conf\"\n\t\tnamespace: context.namespace\n\t}\n\tdata: {\n\t\tmaster: \"\"\"\n        pidfile /var/run/redis.pid\n        port 6379\n        bind 0.0.0.0\n        timeout 3600\n        tcp-keepalive 1\n        loglevel verbose\n        logfile /data/redis.log\n        slowlog-log-slower-than 10000\n        slowlog-max-len 128\n        databases 16\n        protected-mode no\n        save \\\"\\\"\n        appendonly no\n        \"\"\"\n\n\t\tslave: \"\"\"\n        pidfile /var/run/redis.pid\n        port 6379\n        bind 0.0.0.0\n        timeout 3600\n        tcp-keepalive 1\n        loglevel verbose\n        logfile /data/redis.log\n        slowlog-log-slower-than 10000\n        slowlog-max-len 128\n        databases 16\n        protected-mode no\n        save \\\"\\\"\n        appendonly no\n        slaveof \\(context.workloadName)-master 6379\n        \"\"\"\n\t}\n}\n\"service-master\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-master\"\n\t\tnamespace: context.namespace\n\t\tlabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n\tspec: {\n\t\tports: [{\n\t\t\tname: context.workloadName\n\t\t\tport: 6379\n\t\t}]\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n}\n\"service-master-headless\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-master-headless\"\n\t\tnamespace: context.namespace\n\t\tlabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n\tspec: {\n\t\tclusterIP: \"None\"\n\t\tports: [{\n\t\t\tname: context.workloadName\n\t\t\tport: 6379\n\t\t}]\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n}\n\"statefulset-master\": {\n\tapiVersion: \"apps/v1\"\n\tkind:       \"StatefulSet\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-master\"\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\tselector: matchLabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t\tserviceName: context.workloadName\n\t\treplicas:    1\n\t\ttemplate: {\n\t\t\tmetadata: labels: {\n\t\t\t\tapp:      context.appName\n\t\t\t\tworkload: context.workloadName\n\t\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tserviceAccountName: context.workloadName\n\t\t\t\tcontainers: [{\n\t\t\t\t\tname:  \"main\"\n\t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n\t\t\t\t\tports: [{\n\t\t\t\t\t\tcontainerPort: 6379\n\t\t\t\t\t\tname:          \"redis\"\n\t\t\t\t\t}]\n\t\t\t\t\tcommand: [\n\t\t\t\t\t\t\"redis-server\",\n\t\t\t\t\t\t\"/etc/redis/redis.conf\",\n\t\t\t\t\t]\n\t\t\t\t\tvolumeMounts: [{\n\t\t\t\t\t\tname:      \"redis-conf\"\n\t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n\t\t\t\t\t\tsubPath:   \"master\"\n\t\t\t\t\t}]\n\t\t\t\t}]\n\t\t\t\tvolumes: [{\n\t\t\t\t\tname: \"redis-conf\"\n\t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}\n\t}\n}\n\n\"slave-service\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-slave\"\n\t\tnamespace: context.namespace\n\t\tlabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t}\n\t}\n\tspec: {\n\t\tports: [{\n\t\t\tname: context.workloadName\n\t\t\tport: 6379\n\t\t}]\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t}\n\t}\n}\n\n\"slave-service-headless\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-slave-headless\"\n\t\tnamespace: context.namespace\n\t\tlabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t}\n\t}\n\tspec: {\n\t\tclusterIP: \"None\"\n\t\tports: [{\n\t\t\tname: \"\\(context.workloadName)\"\n\t\t\tport: 6379\n\t\t}]\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t}\n\t}\n}\n\n\"slave-statefulset\": {\n\tapiVersion: \"apps/v1\"\n\tkind:       \"StatefulSet\"\n\tmetadata: {\n\t\tname:      \"\\(context.workloadName)-slave\"\n\t\tnamespace: context.namespace\n\t}\n\tspec: {\n\t\tselector: matchLabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t}\n\t\tserviceName: context.workloadName\n\t\treplicas:    2\n\t\ttemplate: {\n\t\t\tmetadata: labels: {\n\t\t\t\tapp:      context.appName\n\t\t\t\tworkload: context.workloadName\n\t\t\t\titem:     \"\\(context.workloadName)-slave\"\n\t\t\t}\n\t\t\tspec: {\n\t\t\t\tserviceAccountName: context.workloadName\n\t\t\t\tcontainers: [{\n\t\t\t\t\tname:  \"\\(context.workloadName)-slave\"\n\t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n\t\t\t\t\tports: [{\n\t\t\t\t\t\tcontainerPort: 6379\n\t\t\t\t\t\tname:          \"redis\"\n\t\t\t\t\t}]\n\t\t\t\t\tcommand: [\n\t\t\t\t\t\t\"bash\",\n\t\t\t\t\t\t\"-c\",\n\t\t\t\t\t\t\"\"\"\n                until [ \\\"$(echo 'set check_status 1'|timeout 3 redis-cli -h \\(context.workloadName)-master)\\\" = \\\"OK\\\" ];do sleep 4s;echo \\\"waiting for the master ready\\\";done\n                redis-server /etc/redis/redis.conf\n                \"\"\"]\n\t\t\t\t\tvolumeMounts: [{\n\t\t\t\t\t\tname:      \"redis-conf\"\n\t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n\t\t\t\t\t\tsubPath:   \"slave\"\n\t\t\t\t\t}]\n\t\t\t\t}]\n\t\t\t\tvolumes: [{\n\t\t\t\t\tname: \"redis-conf\"\n\t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}\n\t}\n}\n\"service\": {\n\tapiVersion: \"v1\"\n\tkind:       \"Service\"\n\tmetadata: {\n\t\tname:      context.workloadName\n\t\tnamespace: context.namespace\n\t\tlabels: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n\tspec: {\n\t\tports: [{\n\t\t\tname: context.workloadName\n\t\t\tport: 6379\n\t\t}]\n\t\tselector: {\n\t\t\tapp:      context.appName\n\t\t\tworkload: context.workloadName\n\t\t\titem:     \"\\(context.workloadName)-master\"\n\t\t}\n\t}\n}\n","name: redis","aam.globalsphare.com/v1alpha1","apiVersion: aam.globalsphare.com/v1alpha1\nkind: WorkloadVendor\nmetadata:\n  name: redis\nspec: |\n  parameter: {\n  }\n  \"\\(context.appName)-configmap\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ConfigMap\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.appName)-redis-conf\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tdata: {\n  \t\tmaster: \"\"\"\n  \t\t\tpidfile /var/run/redis.pid\n  \t\t\tport 6379\n  \t\t\tbind 0.0.0.0\n  \t\t\ttimeout 3600\n  \t\t\ttcp-keepalive 1\n  \t\t\tloglevel verbose\n  \t\t\tlogfile /data/redis.log\n  \t\t\tslowlog-log-slower-than 10000\n  \t\t\tslowlog-max-len 128\n  \t\t\tdatabases 16\n  \t\t\tprotected-mode no\n  \t\t\tsave \\\"\\\"\n  \t\t\tappendonly no\n\n  \t\t\t\"\"\"\n\n  \t\tslave: \"\"\"\n          pidfile /var/run/redis.pid\n          port 6379\n          bind 0.0.0.0\n          timeout 3600\n          tcp-keepalive 1\n          loglevel verbose\n          logfile /data/redis.log\n          slowlog-log-slower-than 10000\n          slowlog-max-len 128\n          databases 16\n          protected-mode no\n          save \\\"\\\"\n          appendonly no\n          slaveof \\(context.workloadName)-master 6379\n          \"\"\"\n  \t}\n  }\n\n  \"\\(context.workloadName)-service-master\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service-master-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      context.workloadName\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-statefulset-master\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-master\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\treplicas:    1\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-master\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"main\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 6379\n  \t\t\t\t\t\tname:          \"redis\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"redis-server\",\n  \t\t\t\t\t\t\"/etc/redis/redis.conf\",\n  \t\t\t\t\t]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"redis-conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n  \t\t\t\t\t\tsubPath:   \"master\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"redis-conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tports: [{\n  \t\t\tname: context.workloadName\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-service-headless\": {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Service\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave-headless\"\n  \t\tnamespace: context.namespace\n  \t\tlabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  \tspec: {\n  \t\tclusterIP: \"None\"\n  \t\tports: [{\n  \t\t\tname: \"\\(context.workloadName)\"\n  \t\t\tport: 6379\n  \t\t}]\n  \t\tselector: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t}\n  }\n\n  \"\\(context.workloadName)-slave-statefulset\": {\n  \tapiVersion: \"apps/v1\"\n  \tkind:       \"StatefulSet\"\n  \tmetadata: {\n  \t\tname:      \"\\(context.workloadName)-slave\"\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {\n  \t\tselector: matchLabels: {\n  \t\t\tapp:      context.appName\n  \t\t\tworkload: context.workloadName\n  \t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t}\n  \t\tserviceName: context.workloadName\n  \t\treplicas:    2\n  \t\ttemplate: {\n  \t\t\tmetadata: labels: {\n  \t\t\t\tapp:      context.appName\n  \t\t\t\tworkload: context.workloadName\n  \t\t\t\titem:     \"\\(context.workloadName)-slave\"\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\tserviceAccountName: context.appName\n  \t\t\t\tcontainers: [{\n  \t\t\t\t\tname:  \"\\(context.workloadName)-slave\"\n  \t\t\t\t\timage: \"harbor1.zlibs.com/dockerhub/redis:6.2.4\"\n  \t\t\t\t\tports: [{\n  \t\t\t\t\t\tcontainerPort: 6379\n  \t\t\t\t\t\tname:          \"redis\"\n  \t\t\t\t\t}]\n  \t\t\t\t\tcommand: [\n  \t\t\t\t\t\t\"bash\",\n  \t\t\t\t\t\t\"-c\",\n  \t\t\t\t\t\t\"\"\"\n                  until [ \\\"$(echo 'set check_status 1'|timeout 3 redis-cli -h \\(context.workloadName)-master)\\\" = \\\"OK\\\" ];do sleep 4s;echo \\\"waiting for the master ready\\\";done\n                  redis-server /etc/redis/redis.conf\n                  \"\"\"]\n  \t\t\t\t\tvolumeMounts: [{\n  \t\t\t\t\t\tname:      \"redis-conf\"\n  \t\t\t\t\t\tmountPath: \"/etc/redis/redis.conf\"\n  \t\t\t\t\t\tsubPath:   \"slave\"\n  \t\t\t\t\t}]\n  \t\t\t\t}]\n  \t\t\t\tvolumes: [{\n  \t\t\t\t\tname: \"redis-conf\"\n  \t\t\t\t\tconfigMap: name: \"\\(context.appName)-redis-conf\"\n  \t\t\t\t}]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  context: {\n  \tappName:      string\n  \tworkloadName: string\n  \tnamespace:    string\n  }\n  parameter: {\n  \tauthorization?: [...{\n  \t\tservice:   string\n  \t\tnamespace: string\n  \t\tresources?: [...{\n  \t\t\turi: string\n  \t\t\taction: [...string]\n  \t\t}]\n  \t}]\n  \tserviceEntry?: [...{\n  \t\tname:     string\n  \t\thost:     string\n  \t\taddress?: string\n  \t\tport:     int\n  \t\tprotocol: string\n  \t}]\n  \tdependencies?: [string]: host: string\n  \tuserconfigs?: string | *\"{}\"\n  \tingress?: {\n  \t\thost: string\n  \t\tpath?: [...string]\n  \t}\n  }\n\n  namespace: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"Namespace\"\n  \tmetadata: {\n  \t\tname: context.namespace\n  \t\tlabels: {\n  \t\t\t\"istio-injection\": \"enabled\"\n  \t\t}\n  \t}\n  }\n  serviceAccount: {\n  \tapiVersion: \"v1\"\n  \tkind:       \"ServiceAccount\"\n  \tmetadata: {\n  \t\tname:      context.appName\n  \t\tnamespace: context.namespace\n  \t}\n  }\n  \"default-authorizationPolicy\": {\n  \tapiVersion: \"security.istio.io/v1beta1\"\n  \tkind:       \"AuthorizationPolicy\"\n  \tmetadata: {\n  \t\tname:      context.namespace\n  \t\tnamespace: context.namespace\n  \t}\n  \tspec: {}\n  }\n  if parameter.serviceEntry != _|_ {\n  \tfor k, v in parameter.serviceEntry {\n  \t\t\"serviceEntry-\\(context.workloadName)-to-\\(v.name)\": {\n  \t\t\tapiVersion: \"networking.istio.io/v1alpha3\"\n  \t\t\tkind:       \"ServiceEntry\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.workloadName)-to-\\(v.name)\"\n  \t\t\t\tnamespace: context.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\texportTo: [\".\"]\n  \t\t\t\thosts: [\n  \t\t\t\t\tv.host,\n  \t\t\t\t]\n  \t\t\t\tif v.address != _|_ {\n  \t\t\t\t\taddresses: [\n  \t\t\t\t\t\tv.address,\n  \t\t\t\t\t]\n  \t\t\t\t}\n  \t\t\t\tlocation: \"MESH_EXTERNAL\"\n  \t\t\t\tports: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tnumber:   v.port\n  \t\t\t\t\t\tname:     \"port-name\"\n  \t\t\t\t\t\tprotocol: v.protocol\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  if parameter.authorization != _|_ {\n  \tfor k, v in parameter.authorization {\n  \t\t\"island-allow-\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\": {\n  \t\t\tapiVersion: \"security.istio.io/v1beta1\"\n  \t\t\tkind:       \"AuthorizationPolicy\"\n  \t\t\tmetadata: {\n  \t\t\t\tname:      \"\\(context.namespace)-to-\\(v.namespace)-\\(v.service)\"\n  \t\t\t\tnamespace: v.namespace\n  \t\t\t}\n  \t\t\tspec: {\n  \t\t\t\taction: \"ALLOW\"\n  \t\t\t\tselector: {\n  \t\t\t\t\tmatchLabels: {\n  \t\t\t\t\t\tworkload: v.service\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\trules: [\n  \t\t\t\t\t{\n  \t\t\t\t\t\tfrom: [\n  \t\t\t\t\t\t\t{source: principals: [\"cluster.local/ns/\\(context.namespace)/sa/\\(context.appName)\"]},\n  \t\t\t\t\t\t]\n  \t\t\t\t\t\tif v.resources != _|_ {\n  \t\t\t\t\t\t\tto: [\n  \t\t\t\t\t\t\t\tfor resource in v.resources {\n  \t\t\t\t\t\t\t\t\toperation: {\n  \t\t\t\t\t\t\t\t\t\tmethods: resource.actions\n  \t\t\t\t\t\t\t\t\t\tpaths: [resource.uri]\n  \t\t\t\t\t\t\t\t\t}\n  \t\t\t\t\t\t\t\t},\n  \t\t\t\t\t\t\t]\n  \t\t\t\t\t\t}\n  \t\t\t\t\t},\n  \t\t\t\t]\n  \t\t\t}\n  \t\t}\n  \t}\n  }");
