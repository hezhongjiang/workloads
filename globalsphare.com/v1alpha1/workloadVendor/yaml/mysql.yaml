apiVersion: v1
kind: Service
metadata:
  labels:
    item: example-master
  name: example-master-headless
spec:
  clusterIP: None
  ports:
    - name: example
      port: 3306
  selector:
    item: example-master
---
apiVersion: v1
kind: Service
metadata:
  labels:
    item: example-slave
  name: example-slave
spec:
  ports:
    - name: example
      port: 3306
  selector:
    item: example-slave
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-slave
spec:
  replicas: 2
  selector:
    matchLabels:
      item: example-slave
  serviceName: example-slave
  template:
    metadata:
      labels:
        item: example-slave
    spec:
      containers:
        - command:
            - bash
            - -c
            - |-
              rm -rf /var/lib/mysql/lost+found
              until mysql -h example-master-0.example-master-headless -P 3306 -p123456 -e "SELECT 1"; do sleep 1; done
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /etc/mysql/conf.d/server-id.cnf
              echo server-id=$((101 + $ordinal)) >> /etc/mysql/conf.d/server-id.cnf
              echo "run mysql!!"
              /usr/local/bin/docker-entrypoint.sh mysqld
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "123456"
          image: harbor1.zlibs.com/dockerhub/mysql:5.7
          name: main
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - mountPath: /etc/mysql/conf.d/mysql.cnf
              name: conf
              subPath: my.cnf
            - mountPath: /docker-entrypoint-initdb.d/init.sql
              name: conf
              subPath: init.sql
      serviceAccountName: db
      volumes:
        - configMap:
            name: example-slave
          name: conf
  volumeClaimTemplates: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db
---
apiVersion: v1
kind: Service
metadata:
  labels:
    item: example-master
  name: example-master
spec:
  ports:
    - name: example
      port: 3306
  selector:
    item: example-master
---
apiVersion: v1
kind: Service
metadata:
  labels:
    item: example-master
  name: example
spec:
  ports:
    - name: example
      port: 3306
  selector:
    item: example-master
---
apiVersion: v1
data:
  init.sql: |
    create database test;
  my.cnf: |-
    [mysqld]
    log-bin = mysql-bin
    server-id = 100
    binlog_format=row
    gtid_mode=on
    enforce_gtid_consistency=on
kind: ConfigMap
metadata:
  labels:
    item: example-master
  name: example-master
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-master
spec:
  replicas: 1
  selector:
    matchLabels:
      item: example-master
  serviceName: example-master-headless
  template:
    metadata:
      labels:
        item: example-master
    spec:
      containers:
        - command:
            - bash
            - -c
            - |2-
                rm -rf /var/lib/mysql/lost+found
                echo "start server!"
                /usr/local/bin/docker-entrypoint.sh mysqld
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "123456"
          image: harbor1.zlibs.com/dockerhub/mysql:5.7
          name: main
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - mountPath: /etc/mysql/conf.d/mysql.cnf
              name: conf
              subPath: my.cnf
            - mountPath: /docker-entrypoint-initdb.d/init.sql
              name: conf
              subPath: init.sql
      serviceAccountName: db
      volumes:
        - configMap:
            name: example-master
          name: conf

---
apiVersion: v1
data:
  init.sql: |-
    change master to master_host='example-master-0.example-master-headless', master_port=3306, master_user='root', master_password='123456', master_auto_position=1;
    start slave;
  my.cnf: |-
    [mysqld]
    log-bin = mysql-bin
    binlog_format=row
    gtid_mode=on
    enforce_gtid_consistency=on
kind: ConfigMap
metadata:
  labels:
    item: example-slave
    workload: example
  name: example-slave
---
apiVersion: v1
kind: Service
metadata:
  name: example-slave-headless
  labels:
    item: example-slave
spec:
  clusterIP: None
  ports:
    - name: example
      port: 3306
  selector:
    item: example-slave
